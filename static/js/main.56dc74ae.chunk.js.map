{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["X","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","level2hexs","Hex","level1hexs","level0hexs","hexagons","toConsumableArray","concat","state","turns","turnsMade","turn","result","winCombination","hex","_this$state","newTurn","HexUtils","getID","newTurns","assign","newTurnsMade","_this$checkResult","checkResult","_this$checkResult2","slicedToArray","setState","undefined","_this$checkRound","checkRound","_this$checkRound2","_this$checkRound3","_this$checkRound4","_this$checkDiagonals","checkDiagonals","_this$checkDiagonals2","size","hexs","currentTurn","getTurn","i","length","nextTurn","push","nextHex","Math","trunc","direction","subtract","j","WIN_SIZE","add","max","abs","q","r","s","hexTurn","_this2","_this$state2","react_default","a","createElement","className","lib","width","viewBox","x","y","flat","spacing","origin","map","key","hexLevel","find","whex","equals","join","onClick","makeTurn","hexText","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAMMA,SAAI,GA+MKC,cAxMb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAa,CAChB,IAAIC,MAAI,GAAI,EAAG,GACf,IAAIA,MAAI,GAAI,EAAG,GACf,IAAIA,MAAI,GAAI,EAAG,GACf,IAAIA,MAAI,GAAI,GAAI,GAChB,IAAIA,MAAI,EAAG,GAAI,GACf,IAAIA,MAAI,EAAG,GAAI,GACf,IAAIA,MAAI,EAAG,GAAI,GACf,IAAIA,OAAK,EAAG,GAAI,GAChB,IAAIA,OAAK,EAAG,EAAG,GACf,IAAIA,OAAK,EAAG,EAAG,GACf,IAAIA,OAAK,EAAG,EAAG,GACf,IAAIA,OAAK,GAAI,EAAG,IAGlBR,EAAKS,WAAa,CAChB,IAAID,MAAI,GAAI,EAAG,GACf,IAAIA,MAAI,GAAI,EAAG,GACf,IAAIA,MAAI,EAAG,GAAI,GACf,IAAIA,MAAI,EAAG,GAAI,GACf,IAAIA,OAAK,EAAG,EAAG,GACf,IAAIA,OAAK,EAAG,EAAG,IAGjBR,EAAKU,WAAa,CAChB,IAAIF,MAAI,EAAG,EAAG,IAGhBR,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAoBD,EAAKU,YAAzBG,OAAAZ,OAAAW,EAAA,EAAAX,CAAwCD,EAAKS,YAA7CR,OAAAW,EAAA,EAAAX,CAA4DD,EAAKO,aAEjEP,EAAKc,MAAQ,CACXC,MAAO,GACPC,UAAW,EACXC,KAAMpB,EACNqB,OAAQ,KACRC,eAAgB,IArCDnB,wEAyCVoB,GAAK,IAAAC,EACuBlB,KAAKW,MAAhCC,EADIM,EACJN,MAAOE,EADHI,EACGJ,KAAMD,EADTK,EACSL,UACfM,EAAU,GAChBA,EAAQC,WAASC,MAAMJ,IAAQH,EAC/B,IAAMQ,EAAWxB,OAAOyB,OAAOJ,EAASP,GAClCY,EAAeX,EAAY,EALrBY,EAMqBzB,KAAK0B,YAAYJ,EAAUE,GANhDG,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GAMLV,EANKY,EAAA,GAMGX,EANHW,EAAA,GAQZ3B,KAAK6B,SAAS,CAAEd,OAAQA,EAAQC,eAAgBA,EAAgBF,KAAiB,OAAXC,GAAmBD,EAAO,GAAK,OAAIgB,EAAWlB,MAAOU,EAAUT,UAAWW,wCAGtIZ,EAAOC,GACjB,GAAIA,EA7DmB,EA8DrB,MAAO,CAAC,KAAM,IAGhB,IAAIE,EACAC,EANwBe,EAQD/B,KAAKgC,WAAWpB,EAAOZ,KAAKM,YAR3B2B,EAAAnC,OAAA8B,EAAA,EAAA9B,CAAAiC,EAAA,GAU5B,GAFChB,EAR2BkB,EAAA,GAQnBjB,EARmBiB,EAAA,GAUb,OAAXlB,EACF,MAAO,CAACA,EAAQC,GAXU,IAAAkB,EAcDlC,KAAKgC,WAAWpB,EAAOZ,KAAKI,YAd3B+B,EAAArC,OAAA8B,EAAA,EAAA9B,CAAAoC,EAAA,GAgB5B,GAFCnB,EAd2BoB,EAAA,GAcnBnB,EAdmBmB,EAAA,GAgBb,OAAXpB,EACF,MAAO,CAACA,EAAQC,GAjBU,IAAAoB,EAoBDpC,KAAKqC,eAAezB,GApBnB0B,EAAAxC,OAAA8B,EAAA,EAAA9B,CAAAsC,EAAA,GAsB5B,OAFCrB,EApB2BuB,EAAA,GAoBnBtB,EApBmBsB,EAAA,GAsBb,OAAXvB,EACK,CAACA,EAAQC,GAGX,CAACH,GAAab,KAAKQ,SAAS+B,MAnF1B,EAmFwC,KAAM,uCAG9C3B,EAAO4B,GAIhB,IAHA,IAAIC,EAAczC,KAAK0C,QAAQ9B,EAAO4B,EAAK,IACvCxB,OAAiCc,IAAhBW,EAA4B,GAAK,CAACD,EAAK,IAEnDG,EAAI,EAAGA,EAAIH,EAAKI,OA9FZ,EA8FgC,IAAKD,EAAG,CACnD,IAAM1B,EAAMuB,EAAKG,EAAIH,EAAKI,QACpBC,EAAW7C,KAAK0C,QAAQ9B,EAAOK,GAErC,GAAIwB,IAAgBI,GAClB,QAAoBf,IAAhBW,IACFzB,EAAe8B,KAAK7B,GAEhBD,EAAe4B,QAtGZ,GAuGL,MAAO,CAACH,EAAazB,QAKzBA,OAAiCc,KADjCW,EAAcI,GAC+B,GAAK,CAAC5B,GAIvD,MAAO,CAAC,KAAM,2CAGDL,GACb,IAAK,IAAI+B,EAAI,EAAGA,EAAI3C,KAAKI,WAAWwC,SAAUD,EAAG,CAC/C,IAAM1B,EAAMjB,KAAKI,WAAWuC,GACtB7B,EAAOd,KAAK0C,QAAQ9B,EAAOK,GAEjC,QAAaa,IAAThB,EAAJ,CAIA,IAAME,EAAiB,CAACC,GAEpB8B,EAAU/C,KAAKM,WAAW0C,KAAKC,MAAMN,EAAI,IAE7C,GAAI3C,KAAK0C,QAAQ9B,EAAOmC,KAAajC,EAArC,CAIAE,EAAe8B,KAAKC,GAIpB,IAFA,IAAMG,EAAY9B,WAAS+B,SAASJ,EAAS9B,GAEpCmC,EAAI,EAAGA,EAAIC,IAClBN,EAAU3B,WAASkC,IAAIP,EAASG,GAE5BlD,KAAK0C,QAAQ9B,EAAOmC,KAAajC,KAHHsC,EAOlCpC,EAAe8B,KAAKC,GAGtB,GAAI/B,EAAe4B,QAlJR,EAmJT,MAAO,CAAC9B,EAAME,KAIlB,MAAO,CAAC,KAAM,qCAGPC,GACP,OAAO+B,KAAKO,IAAIP,KAAKO,IAAIP,KAAKQ,IAAIvC,EAAIwC,GAAIT,KAAKQ,IAAIvC,EAAIyC,IAAKV,KAAKQ,IAAIvC,EAAI0C,oCAGnE/C,EAAOK,GACb,OAAOL,EAAMQ,WAASC,MAAMJ,oCAGtBL,EAAOK,GACb,IAAM2C,EAAU5D,KAAK0C,QAAQ9B,EAAOK,GAEpC,OAAO2C,IAAYlE,EAhKR,IAFL,IAkK2BkE,EA/JtB,IA+J+C,sCAGnD,IAAAC,EAAA7D,KACCQ,EAAaR,KAAbQ,SADDsD,EAEyC9D,KAAKW,MAA7CC,EAFDkD,EAEClD,MAAOG,EAFR+C,EAEQ/C,OAAQC,EAFhB8C,EAEgB9C,eAAgBF,EAFhCgD,EAEgChD,KACvC,OACEiD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAEiB,OAAXlD,EA5KJ,IA6KKA,EAAe,SAAYA,IAAWrB,EAAI,SAAW,OA7K1D,IA8KKoB,EAAa,WAAa,YAGjCiD,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASC,MAAM,OAAOC,QAAQ,mBAC5BN,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQ5B,KAAM,CAAE+B,EAAG,GAAIC,EAAG,IAAMC,MAAM,EAAMC,QAAS,KAAMC,OAAQ,CAAEJ,EAAG,EAAGC,EAAG,IAE1E/D,EAASmE,IACP,SAAC1D,EAAK0B,GACJ,IAAMiB,EAAUC,EAAKnB,QAAQ9B,EAAOK,GAEpC,OACE8C,EAAAC,EAAAC,cAACE,EAAA,QAAD,CACES,IAAKjC,EACLc,EAAGxC,EAAIwC,EACPC,EAAGzC,EAAIyC,EACPC,EAAG1C,EAAI0C,EACPO,UAAY,SAAAxD,OAASmD,EAAKgB,SAAS5D,IAAQD,EAAe8D,KAAK,SAACC,GAAD,OAAU3D,WAAS4D,OAAOD,EAAM9D,KAAQ,SAAW,IAAIgE,KAAK,KAC3HC,aAAsBpD,IAAZ8B,GAAoC,OAAX7C,EAAmB,kBAAM8C,EAAKsB,SAASlE,SAAOa,GAEjFiC,EAAAC,EAAAC,cAACE,EAAA,KAAD,KAAON,EAAKuB,QAAQxE,EAAOK,iBA5L/BoE,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56dc74ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { HexGrid, Layout, Hexagon, Text, HexUtils, Hex } from 'react-hexgrid'\nimport './App.css';\n\nconst WIN_SIZE = 4;\nconst MIN_TURNS_TO_CHECK = 7;\nconst X = 1;\nconst O = 0;\nconst DRAW = -1;\nconst X_TEXT = 'X';\nconst O_TEXT = 'O';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.level2hexs = [\n      new Hex(0, -2, 2),\n      new Hex(1, -2, 1),\n      new Hex(2, -2, 0),\n      new Hex(2, -1, -1),\n      new Hex(2, 0, -2),\n      new Hex(1, 1, -2),\n      new Hex(0, 2, -2),\n      new Hex(-1, 2, -1),\n      new Hex(-2, 2, 0),\n      new Hex(-2, 1, 1),\n      new Hex(-2, 0, 2),\n      new Hex(-1, -1, 2)\n    ]\n\n    this.level1hexs = [\n      new Hex(0, -1, 1),\n      new Hex(1, -1, 0),\n      new Hex(1, 0, -1),\n      new Hex(0, 1, -1),\n      new Hex(-1, 1, 0),\n      new Hex(-1, 0, 1)\n    ]\n\n    this.level0hexs = [\n      new Hex(0, 0, 0)\n    ]\n\n    this.hexagons = [...this.level0hexs, ...this.level1hexs, ...this.level2hexs]\n\n    this.state = {\n      turns: {},\n      turnsMade: 0,\n      turn: X,\n      result: null,\n      winCombination: []\n    }\n  }\n\n  makeTurn(hex) {\n    const { turns, turn, turnsMade } = this.state\n    const newTurn = {};\n    newTurn[HexUtils.getID(hex)] = turn\n    const newTurns = Object.assign(newTurn, turns)\n    const newTurnsMade = turnsMade + 1\n    const [result, winCombination] = this.checkResult(newTurns, newTurnsMade)\n\n    this.setState({ result: result, winCombination: winCombination, turn: result === null ? (turn + 1) % 2 : undefined, turns: newTurns, turnsMade: newTurnsMade })\n  }\n\n  checkResult(turns, turnsMade) {\n    if (turnsMade < MIN_TURNS_TO_CHECK) {\n      return [null, []];\n    }\n\n    let result;\n    let winCombination;\n\n    [result, winCombination] = this.checkRound(turns, this.level1hexs);\n\n    if (result !== null) {\n      return [result, winCombination];\n    }\n\n    [result, winCombination] = this.checkRound(turns, this.level2hexs);\n\n    if (result !== null) {\n      return [result, winCombination];\n    }\n\n    [result, winCombination] = this.checkDiagonals(turns);\n\n    if (result !== null) {\n      return [result, winCombination];\n    }\n\n    return [turnsMade >= this.hexagons.size ? DRAW : null, []];\n  }\n\n  checkRound(turns, hexs) {\n    let currentTurn = this.getTurn(turns, hexs[0]);\n    let winCombination = currentTurn === undefined ? [] : [hexs[0]];\n\n    for (let i = 1; i < hexs.length + WIN_SIZE - 1; ++i) {\n      const hex = hexs[i % hexs.length];\n      const nextTurn = this.getTurn(turns, hex);\n\n      if (currentTurn === nextTurn) {\n        if (currentTurn !== undefined) {\n          winCombination.push(hex);\n\n          if (winCombination.length >= WIN_SIZE) {\n            return [currentTurn, winCombination];\n          }\n        }\n      } else {\n        currentTurn = nextTurn;\n        winCombination = currentTurn === undefined ? [] : [hex];\n      }\n    }\n\n    return [null, []];\n  }\n\n  checkDiagonals(turns) {\n    for (let i = 0; i < this.level2hexs.length; ++i) {\n      const hex = this.level2hexs[i];\n      const turn = this.getTurn(turns, hex);\n\n      if (turn === undefined) {\n        continue;\n      }\n\n      const winCombination = [hex];\n\n      let nextHex = this.level1hexs[Math.trunc(i / 2)];\n\n      if (this.getTurn(turns, nextHex) !== turn) {\n        continue;\n      }\n\n      winCombination.push(nextHex);\n\n      const direction = HexUtils.subtract(nextHex, hex);\n\n      for (let j = 0; j < WIN_SIZE - 2; ++j) {\n        nextHex = HexUtils.add(nextHex, direction);\n\n        if (this.getTurn(turns, nextHex) !== turn) {\n          break;\n        }\n\n        winCombination.push(nextHex);\n      }\n\n      if (winCombination.length >= WIN_SIZE) {\n        return [turn, winCombination];\n      }\n    }\n\n    return [null, []];\n  }\n\n  hexLevel(hex) {\n    return Math.max(Math.max(Math.abs(hex.q), Math.abs(hex.r)), Math.abs(hex.s));\n  }\n\n  getTurn(turns, hex) {\n    return turns[HexUtils.getID(hex)];\n  }\n\n  hexText(turns, hex) {\n    const hexTurn = this.getTurn(turns, hex);\n\n    return hexTurn === X ? X_TEXT : (hexTurn === O ? O_TEXT : null);\n  }\n\n  render() {\n    const { hexagons } = this\n    const { turns, result, winCombination, turn } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>\n          {\n              result !== null ?\n              (result === O ? 'O wins' : (result === X ? 'X wins' : 'Draw')) :\n              (turn === O ? \"O's turn\" : \"X's turn\")\n          }\n        </h1>\n        <HexGrid width=\"100%\" viewBox=\"-50 -50 100 100\">\n          <Layout size={{ x: 10, y: 10 }} flat={true} spacing={1.01} origin={{ x: 0, y: 0 }}>\n            {\n              hexagons.map(\n                (hex, i) => {\n                  const hexTurn = this.getTurn(turns, hex);\n\n                  return (\n                    <Hexagon\n                      key={i}\n                      q={hex.q}\n                      r={hex.r}\n                      s={hex.s}\n                      className={ [`level${this.hexLevel(hex)}`, winCombination.find((whex) => HexUtils.equals(whex, hex)) ? 'winner' : ''].join(' ')  }\n                      onClick={(hexTurn === undefined && result === null) ? () => this.makeTurn(hex) : undefined }\n                    >\n                      <Text>{this.hexText(turns, hex)}</Text>\n                    </Hexagon>\n                  )\n                }\n              )\n            }\n          </Layout>\n        </HexGrid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}